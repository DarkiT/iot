<?php
/**
 * Created by PhpStorm.
 * User: liuxiaodong
 * Date: 2018/5/21 0021
 * Time: 17:01
 */

namespace app\home\controller;


use think\Validate;

class Order extends Base
{
    public $obj;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->obj = model('Order');
    }
    /**
     * $cart =
     * {"c_user_id": "4", 用户id
    "c_deviceid: "19", 设备id
    "c_charge_id": "5", 充电时间id
    "c_charge_time": "1", 充电时间
    "c_price": "2", 价格
    "c_type": "1" 租用leix
    "c_merchant_id" "1"
    }
     */
    //加入购物车
    public function order()
    {
        if(request()->isPost())
        {
            $data = input('post.');
            $validate = validate('Order');
            $res = $validate->scene('checkPost')->check($data);
            if(!$res)
            {
                return json(['stats' => 0, 'msg' => $validate->getError()]);
            }
            $postData['c_deviceid'] = $data['c_deviceid'];
            $postData['c_user_id'] = $data['c_user_id'];
            $postData['c_charge_id'] = $data['c_charge_id'];




        }
        return json([
            'status' => 0,
            'msg' => '非法请求'
        ]);


    }
    public function addcart()
    {
        if (request()->isPost()) {
            //接收用户id   商品id  规格id   商户id 规格数量   快递方式1，2
            $data = I('post.');

            if (empty($data['c_goods_id'])) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '请选择商品'
                ]);
            }
            if (empty($data['c_guige_id'])) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '请选择规格'
                ]);
            }
            if (empty($data['c_merchant_id'])) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '商户id不能为空'
                ]);
            }

            //如果用户名称和商品名称和规格相同则只添加商品数量
            $where['c_user_id'] = $data['c_user_id'];
            $where['c_goods_id'] = $data['c_goods_id'];
            $where['c_guige_id'] = $data['c_guige_id'];
            $where['c_merchant_id'] = $data['c_merchant_id'];
            $where['c_isdel'] =1;
            $where['c_status'] =1;
            $res = $this->obj->where($where)->field('c_id,c_num')->find();
            if ($res !== null) {
                $parm['c_num'] = $res['c_num'] + $data['c_num'];
                $parm['c_update_time'] = time();
                if ($model->where(['c_id' => $res['c_id']])->save($parm)) {
                    $this->ajaxReturn([
                        'status' => 1,
                        'msg' => '加入购物车成功'
                    ]);
                } else {
                    $this->ajaxReturn([
                        'status' => 0,
                        'msg' => '加入购物车失败'
                    ]);
                }
            } else {
                $data['c_create_time'] = time();
                if ($model->add($data)) {
                    $this->ajaxReturn([
                        'status' => 1,
                        'msg' => '加入购物车成功'
                    ]);
                } else {
                    $this->ajaxReturn([
                        'status' => 0,
                        'msg' => '加入购物车失败'
                    ]);
                }
            }
            return;
        }
        return json([
            'status' => '0',
            'msg' => '非法请求'
        ]);
    }

    //显示购物车
    public function indexcart(){
        $model = M('Cart');
        if (IS_GET) {
            $pagesize = I('get.pagesize') ? I('get.pagesize') : 6;
            $user_id = I('get.user_id');
            if (empty($user_id)) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '用户错误'
                ]);
            }
            $count = $model->where(['c_status' => 1,'c_isdel'=>1,'c_user_id'=>$user_id])->count();
            if ($count == 0) {
                $this->ajaxReturn([
                    'status' => 2,
                    'msg' => '数据为空'
                ]);
            }
            $Page = new \Think\Page($count, $pagesize);
            $Page->show();
            $rows = $model->alias('g')
                ->field('g.c_id as c_cart_id,g.c_goods_id ,g.c_guige_id,g.c_num,g.c_merchant_id,g.c_create_time,o.c_title,o.c_panstarttime,o.c_panstoptime')
                ->join('left join __GOODS__ as o ON g.c_goods_id=o.c_id')

                ->where(['g.c_status' => 1,'g.c_isdel'=>1,'g.c_user_id'=>$user_id])
                ->order('c_cart_id desc')
                ->limit($Page->firstRow . ',' . $Page->listRows)
                ->select();
            $total = $Page->totalPages;
            // var_dump($rows);die;
            foreach ($rows as $k=>$v) {
                //1查出商品图片
                $image = M('GoodsImage')->where(['c_goods_id'=>$v['c_goods_id']])->order('c_sort desc,c_id asc')->find();
//                dump($image);die;
                $rows[$k]['c_image'] =$image['c_image'];
                //2查出规格里面的最小价格
                $price = M('Guige')->where(['c_id'=>$v['c_guige_id']])->order('c_price asc')->find();
                // var_dump($price);
                $rows[$k]['c_price'] =$price['c_price'];
                $rows[$k]['c_vipprice'] =$price['c_vipprice'];
                $rows[$k]['c_panprice'] =$price['c_panprice'];
                $rows[$k]['c_guige'] = $price['c_guige'];
            }
            // var_dump($rows);die;
            if ($rows == false) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '数据错误'
                ]);
            } else {
                $this->ajaxReturn([
                    'status' => 1,
                    'data' => $rows,
                    'totalpage' => $total,
                    'count' => $count,
                ]);
            }
            return;
        }

    }

    //批量删除
    public function delAll()
    {
        $model = M('Cart');
        if (IS_POST) {
            $cart_id = I('post.c_cart_id');
            $c_user_id = I('post.c_user_id');
            if (empty($cart_id)) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '请选择要删除的'
                ]);
            }
            $res = $model->where(['c_id'=>['in',$cart_id],'c_user_id'=>$c_user_id])->setField('c_isdel', 0);
            if ($res) {
                $this->ajaxReturn([
                    'status' => 1,
                    'msg' => '删除成功'
                ]);
            } else {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '删除失败'
                ]);
            }
            return;
        }
    }

    //生成订单
    public function order(){
        if (IS_POST) {
            $data = I('post.');
            if (empty($data)) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '参数错误'
                ]);
            }
            if (empty($data['c_address_id'])) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '收货地址不能为空'
                ]);
            }

            //将不同的商户id分成两个的数组，生成不同的商户订单
            $temp_array = array();
            foreach ($data['list'] as $v) {
                $temp_array[$v['c_merchant_id']][] = $v;
            }
            unset($data['list']);
            $newdata = array();
            foreach ($temp_array as $kk=>$vv) {
                $newdata[] = array_merge($data,['list'=>$vv]);
            }
            foreach ($newdata as $k =>$v) {
                //1.判断库存是否充足
                foreach ($v['list'] as $kk => $vv) {
                    $guigeArr = M('Guige')->where(['c_id' => $vv['c_guige_id']])->field('c_stock')->find();
                    if ($guigeArr['c_stock'] < $vv['c_num']) {
                        $this->ajaxReturn([
                            'status' => 0,
                            'msg' => '库存不足，请联系客服'
                        ]);
                    }
                }


                //2.确认是否为vip   计算总共价格  减少库存
                M()->startTrans();
                $total = 0;
                if(!empty($v['c_code'])){  //会员码不为空
                    $userArr = M('User')->where(['c_code' => $data['c_code'], 'c_status' => 1, 'c_isdel' => 1])->find();
                    if($userArr){//会员码正确
                        $params['c_code'] = $v['c_code'];
                        foreach ($v['list'] as $kk =>$vv ) {
                            $result_one = M('Goods')->where(['c_id' => array("eq",$vv['c_goods_id']), 'c_panstarttime' => array("elt", time()), 'c_panstoptime' => array("egt", time())])->find();
                            $GuigeArr = M('Guige')->where(['c_id' => $vv['c_guige_id']])->field('c_price,c_panprice,c_vipprice,c_stock as stock_num')->find();
                            if (!$result_one) {
                                $v['list'][$kk]["c_rush"]=1;
                                $total += $GuigeArr['c_vipprice'] * $vv['c_num'];
                            }else{
                                $total += $GuigeArr['c_panprice'] * $vv['c_num'];
                            }
                            $stocks = M('Guige')->where(['c_id' => $vv['c_guige_id']])->setDec('c_stock',  $vv['c_num']); //库存减少
                            if ($stocks == false) {
                                M()->rollback();
                                $this->ajaxReturn([
                                    'status' => 0,
                                    'msg' => '库存出错'
                                ]);
                            }
                        }
                    }else{//不是vip
                        $data['c_code']="";
                        foreach ($v['list'] as $kk =>$vv ){
                            $result_one = M('Goods')->where(['c_id' => array("eq",$vv['c_goods_id']), 'c_panstarttime' => array("elt", time()), 'c_panstoptime' => array("egt", time())])->find();
                            $GuigeArr = M('Guige')->where(['c_id' => $vv['c_guige_id']])->field('c_price,c_panprice,c_vipprice,c_stock as stock_num')->find();
                            if (empty($result_one)) {
                                $v['list'][$kk]["c_rush"]=1;
                                $total += $GuigeArr['c_price'] * $vv['c_num'];
                            }else{
                                $total += $GuigeArr['c_panprice'] * $vv['c_num'];
                            }
                            $stocks = M('Guige')->where(['c_id' => $vv['c_guige_id']])->setDec('c_stock',  $vv['c_num']); //库存减少
                            if ($stocks == false) {
                                M()->rollback();
                                $this->ajaxReturn([
                                    'status' => 0,
                                    'msg' => '库存出错'
                                ]);
                            }
                        }
                    }
                }else{//会员码为空不是vip
                    foreach ($v['list'] as $kk =>$vv ){
                        $result_one = M('Goods')->where(['c_id' => array("eq",$vv['c_goods_id']), 'c_panstarttime' => array("elt", time()), 'c_panstoptime' => array("egt", time())])->find();
                        $GuigeArr = M('Guige')->where(['c_id' => $vv['c_guige_id']])->field('c_price,c_panprice,c_vipprice,c_stock as stock_num')->find();
                        if (empty($result_one)) {
                            $total += $GuigeArr['c_price'] * $vv['c_num'];
                        }else{
                            $v['list'][$kk]["c_rush"]=1;
                            $total += $GuigeArr['c_panprice'] * $vv['c_num'];
                        }
                        $stocks = M('Guige')->where(['c_id' => $vv['c_guige_id']])->setDec('c_stock',  $vv['c_num']); //库存减少
                        if ($stocks == false) {
                            M()->rollback();
                            $this->ajaxReturn([
                                'status' => 0,
                                'msg' => '库存出错'
                            ]);
                        }
                    }
                }

                //3.生成商户订单
                $params['c_total_money'] = $total;
                $params['c_order_time'] = time();
                $params['c_user_id'] = $v['c_user_id'];
                $params['c_address_id'] = $v['c_address_id'];
                $params['c_pay_status'] = 1;
                $orderid= M('Order')->add($params);//生成商户订单id
                if ($orderid == false) {
                    M()->rollback();
                    $this->ajaxReturn([
                        'status' => 0,
                        'msg' => '生成商户订单出错'
                    ]);
                }
                $order_ids[] = $orderid;
                //4订单附表的操作
                foreach ($v['list'] as $kk => $vv) {
                    $ex['c_order_id'] = $orderid;
                    $ex['c_num'] = $vv['c_num'];
                    $ex['c_guige_id'] = $vv['c_guige_id'];
                    $ex['c_goods_id'] = $vv['c_goods_id'];
                    $ex['c_create_time'] = time();
                    $ex['c_rush'] = isset($vv["c_rush"])?1:0;
                    $OrderList = M('OrderList')->add($ex);
                    if ($OrderList == false) {
                        M()->rollback();
                        $this->ajaxReturn([
                            'status' => 0,
                            'msg' => '订单附表出错'
                        ]);
                    }
                    //5生成订单后购物车状态变为0
                    $cart['c_user_id'] = $v['c_user_id'];
                    $cart['c_guige_id'] = $vv['c_guige_id'];
                    $cart['c_goods_id'] = $vv['c_goods_id'];
                    M('Cart')->where($cart)->setField('c_status',0);
                }
            }
//           6.统一支付,生成支付订单
            $payorderstring  = implode(',',$order_ids);
            $orderArr = M('Order')->where(['c_id'=>['in',$payorderstring]])->field('c_total_money')->select();
            $totalmoneys = 0;
            foreach ($orderArr as $kk=>$vv){
                $totalmoneys += $vv['c_total_money'];
            }
//            dump($totalmoneys);die;
            //存入到支付表，方便统一支付
            $goodsintegralArr = M('Other')->field('c_goodsintegral')->find();//将此时设置的每一元对应的积分数存入数据库，确认收货的时候用来添加积分
            $da['c_integral'] = $goodsintegralArr['c_goodsintegral'];
            $payorder = $this->setorder();
            $da['c_total_money'] = $totalmoneys;
            $da['c_sn'] = 'jc'.$payorder;
            $da['c_pay_status'] = 1;
            $da['c_order_time'] = time();
            $da['c_order_ids'] = $payorderstring;
            $da['c_user_id'] = $data['c_user_id'];
            $da['c_code'] = $data['c_code'];
            $da['c_address_id'] = $data['c_address_id'];
//            dump($da);die;
            $pay_order_res = M('Payorder')->add($da);
            if ($pay_order_res == false) {
                M()->rollback();
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '生成订单失败',

                ]);
            }
            //7.在子订单表中插入主订单id
            $res = M('Order')->where(['c_id'=>['in',$payorderstring]])->setField('c_payorder_id',$pay_order_res);
            if ($res == false) {
                M()->rollback();
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '插入主订单出错'
                ]);
            }

            M()->commit();
            $this->ajaxReturn([
                'status' => 1,
                'msg' => '生成订单成功',
                'c_payorder_id' => $pay_order_res,
                'c_order_ids' => $payorderstring,
            ]);

            return;
        }
    }


    //显示订单页面
    public function orderlist(){
        header("Content-type:text/html;charset=utf-8");
        $model = M('Payorder');
        if (IS_GET) {
            $goodscount = 0;
            //1.接收 用户id 分页数量 支付状态
            $user_id = I('get.user_id');
            $pagesize = I('get.pagesize')?I('get.pagesize'):6;
            $c_pay_status = I('get.pay_status');
            if (empty($user_id)) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'用户不存在'
                ]);
            }
            $where['c_user_id'] = $user_id;
            $where['c_isdel'] = 1;
            $where['c_status'] = 1;
            if (!empty($c_pay_status)) {
                $where['c_pay_status'] = $c_pay_status;
            }
            $count = $model->where($where)->count();
            $page = new \Think\Page($count, $pagesize);
            $show = $page->show();
            //查询出支付订单表中订单id
            $payorder_rows = $model
                ->where($where)
                ->field('c_id as payorder_id,c_total_money,c_order_time,c_pay_money,c_pay_status,c_pay_time,c_order_ids,c_code')
                ->order('payorder_id desc')
                ->limit($page->firstRow . ',' . $page->listRows)
                ->select();
            $total = $page->totalPages;
            foreach ($payorder_rows as $k=>$v){
                $payorder_rows[$k]['c_pay_statu'] = D('Admin/order')->getpayStatus($v['c_pay_status']);
                $payorder_rows[$k]['c_order_time'] = date('Y-m-d H:i:s', $v['c_order_time']);
                $payorder_rows[$k]['c_pay_time'] ? $payorder_rows[$k]['c_pay_time'] = date('Y-m-d H:i:s', $v['c_pay_time']):$payorder_rows[$k]['c_pay_time']='未支付';
                $payorder_rows[$k]['c_pay_money'] ? $payorder_rows[$k]['c_pay_money'] = date('Y-m-d H:i:s', $v['c_pay_money']):$payorder_rows[$k]['c_pay_money']='未支付';

                $payorder_rows[$k]['order'] = M('Order')->where(['c_id'=>['in',$v['c_order_ids']]])->select();
                foreach ($payorder_rows[$k]['order'] as $kk => $vv){
                    $payorder_rows[$k]['order'][$kk]['c_order_time'] = date('Y-m-d H:i:s', $vv['c_order_time']);
                    $payorder_rows[$k]['order'][$kk]['c_fahuo_time'] ? $payorder_rows[$k]['order'][$kk]['c_fahuo_time'] = date('Y-m-d H:i:s', $vv['c_pay_time']):$payorder_rows[$k]['order'][$kk]['c_fahuo_time']='未发货';

                    $payorder_rows[$k]['order'][$kk]['orderlist'] = M('OrderList')
                        ->alias('g')
                        ->field('g.c_id as orderlist_id,g.c_rush,g.c_num,g.c_goods_id,o.c_guige,o.c_id as c_guige_id,o.c_price,o.c_vipprice,c.c_title,c_panprice')
                        ->join('left join __GUIGE__ as o ON g.c_guige_id=o.c_id')
                        ->join('left join __GOODS__ as c ON g.c_goods_id=c.c_id')
                        ->where(['g.c_isdel'=>1,'g.c_order_id'=>$vv['c_id']])
                        ->select();
                    foreach($payorder_rows[$k]['order'][$kk]['orderlist'] as &$one_v){
                        $goods_id=$one_v["c_goods_id"];
                        $result_one=M("GoodsImage")->where("c_goods_id=$goods_id")->order("c_id")->find();
                        $one_v["c_image"]=$result_one["c_image"];
                    }
                    $goodscounts = M('OrderList')->where(['c_isdel'=>1,'c_order_id'=>$vv['c_id']])->count();
                    $payorder_rows[$k]['order'][$kk]["count"]=$goodscounts;
                    $goodscount += $goodscounts;

                }
            }
            foreach ($payorder_rows as $key => $value) {
                $payorder_rows[$key]['goodscount'] = $goodscount;
            }
            if (empty($payorder_rows)) {
                $this->ajaxReturn([
                    'status'=>2,
                    'msg'=>'数据为空'
                ]);
            }else{
                $this->ajaxReturn([
                    'status'=>1,
                    'data'=>$payorder_rows,
                    'count'=>$count,
                    'totalpage'=>$total
                ]);
            }
            return;
        }
    }

    //单个订单详情
    public function orderDetail(){
        header('Access-Control-Allow-Origin:http://abc.dasuanshop.com');
        if (IS_GET) {
            //接收订单id
            $payorder_id = I('get.payorder_id');
            $order_idd = I('get.order_id');
            // var_dump($order_idd);die;
            if (empty($payorder_id)) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'参数错误'
                ]);
            }
            $payroderArr = M('Payorder')->where(['c_id'=>$payorder_id])->find();
            $payroderArr['c_pay_statu'] = D('Admin/order')->getpayStatus($payroderArr['c_pay_status']);
            $addressArr = M('Address')->where(['c_id'=>$payroderArr['c_address_id']])->find();//地址信息
            $payroderArr['c_shuohuoname'] =  $addressArr['c_name'];
            $payroderArr['c_tel'] =  $addressArr['c_tel'];
            $payroderArr['c_provinces'] =  $addressArr['c_provinces'];
            $payroderArr['c_city'] =  $addressArr['c_city'];
            $payroderArr['c_zone'] =  $addressArr['c_zone'];
            $payroderArr['c_street'] =  $addressArr['c_street'];
            $payroderArr['c_order_time']  = date('Y-m-d H:i:s', $payroderArr['c_order_time']);
            $payroderArr['c_pay_money'] ? $payroderArr['c_pay_money'] = $payroderArr['c_pay_money']:$payroderArr['c_pay_money']='未支付';
            $payroderArr['c_pay_time'] ? $payroderArr['c_pay_time'] = date('Y-m-d H:i:s', $payroderArr['c_pay_time']):$payroderArr['c_pay_time']='未支付';
            $payroderArr['c_fahuo_time'] ? $payroderArr['c_fahuo_time'] = date('Y-m-d H:i:s', $payroderArr['c_fahuo_time']):$payroderArr['c_fahuo_time']='未发货';

            if ($order_idd == null) {
                $payroderArr['rows'] = M('Order')->where(['c_id'=>['in',$payroderArr['c_order_ids']]])->select();//通过支付订单查询商户订单里面的所有订单
            }else{
                $payroderArr['rows'] = M('Order')->where(['c_id'=>$order_idd])->select();//通过支付订单查询商户订单里面的所有订单
            }
            foreach ($payroderArr['rows'] as $k=>$v){
                $payroderArr['rows'][$k]['c_fahuo_time'] ? $payroderArr['rows'][$k]['c_fahuo_time'] = date('Y-m-d H:i:s',$payroderArr['rows'][$k]['c_fahuo_time']):$payroderArr['rows'][$k]['c_fahuo_time'] = "未发货";
                $payroderArr['rows'][$k]['c_kuaidi_name'] ? $payroderArr['rows'][$k]['c_kuaidi_name'] = $payroderArr['rows'][$k]['c_kuaidi_name']:$payroderArr['rows'][$k]['c_kuaidi_name'] = "未发货";
                $payroderArr['rows'][$k]['c_kuaidi_no'] ? $payroderArr['rows'][$k]['c_kuaidi_no'] =  $payroderArr['rows'][$k]['c_kuaidi_no']:$payroderArr['rows'][$k]['c_kuaidi_no'] = "未发货";
                $payroderArr['rows'][$k]['orderDetail'] = M('OrderList')->where(['c_order_id'=>$v['c_id'],'c_isdel'=>1])->select();//订单附表
                foreach ($payroderArr['rows'][$k]['orderDetail'] as $kk=>$vv){
                    //查orlistid,用于前台删除
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_orderlist_id'] = $vv['c_id'];
                    //查询商品名称
                    $goodsArr = M('Goods')->where(['c_id' => $vv['c_goods_id']])->field('c_title')->find();
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_title'] = $goodsArr['c_title'];
//                   //查询图片
                    $imgArr = M('GoodsImage')->where(['c_goods_id' => $vv['c_goods_id']])->field('c_id,c_image,c_sort')->order(' c_id asc')->find();
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_image'] = $imgArr['c_image'];
                    //查询规格和价格和数量
                    $guigeArr = M('Guige')->where(['c_id' => $vv['c_guige_id']])->field('c_panprice,c_guige,c_price,c_vipprice')->find();
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_guige'] = $guigeArr['c_guige'];
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_price'] = $guigeArr['c_price'];
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_vipprice'] = $guigeArr['c_vipprice'];
                    $payroderArr['rows'][$k]['orderDetail'][$kk]['c_panprice'] = $guigeArr['c_panprice'];
                }
            }
            if (empty($payroderArr)) {
                $this->ajaxReturn([
                    'status'=>2,
                    'msg'=>'数据为空'
                ]);
            }else{
                $this->ajaxReturn([
                    'status'=>1,
                    'data'=>$payroderArr,
                ]);
            }
            return;
        }
    }

    //已完成订单(因为评论是按一个商品一个评论,而不是一个订单一个评论)
    public function alread()
    {
        header('Access-Control-Allow-Origin:http://abc.dasuanshop.com');
        if(IS_GET){
            //接收, goods_id  guige_id  payorder_id  user_id
            $data = I('get.');
            if (empty($data)) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'参数错误'
                ]);
            }
            //1.查询商品详情
            $goodsArr = M('Goods')->where(['c_id'=>$data['goods_id']])->find();
            // var_dump(11);die;

            //2查询规格
            $guigeArr = M('Guige')->where(['c_id'=>$data['guige_id']])->find();
            //3查支付订单
            $payorderArr = M('Payorder')->where(['c_id'=>$data['payorder_id']])->find();
            //4查商品图片
            $goodsimageArr = M('GoodsImage')->where(['c_goods_id'=>$data['goods_id']])->find();
            //查询地址
            $addressArr = M('Address')->where(['c_id'=>$payorderArr['c_address_id']])->find();
            //查用户
            $userArr = M('User')->where(['c_id'=>$data['user_id']])->find();
            //查订单附表
            $orderLisetArr = M('OrderList')->where(['c_goods_id'=>$data['goods_id'],'c_guige_id'=>$data['guige_id'],'c_isdel'=>1])->find();
            //查订单表

            $orderArr = M('Order')->where(['c_id'=>$orderLisetArr['c_order_id']])->find();
            // var_dump($orderArr);die;

            $rows['c_name'] = $addressArr['c_name'];
            $rows['c_tel'] = $addressArr['c_tel'];
            $rows['c_provinces'] = $addressArr['c_provinces'];
            $rows['c_city'] = $addressArr['c_city'];
            $rows['c_zone'] = $addressArr['c_zone'];
            $rows['c_street'] = $addressArr['c_street'];
            $rows['c_sn']  = $payorderArr['c_sn'];
            $rows['c_order_time']  =  date("Y-m-d h:i:s", $payorderArr['c_order_time']);
            $rows['c_pay_time']  = date("Y-m-d h:i:s", $payorderArr['c_pay_time']);
            $orderArr['c_fahuo_time'] ? $rows['c_fahuo_time'] = date("Y-m-d h:i:s", $orderArr['c_fahuo_time']): $rows['c_fahuo_time']= '未发货';
            $payorderArr['c_shouhuo_time']  ? $rows['c_shouhuo_time'] = date("Y-m-d h:i:s", $payorderArr['c_shouhuo_time']):$rows['c_shouhuo_time']='未收货';
            if ($goodsArr['c_kuaidi'] ==1){
                $rows['c_kuaidi']  =  '快递免邮';
            }elseif($goodsArr['c_kuaidi'] ==2){
                $rows['c_kuaidi']  =  '货到付款';
            }
            $orderArr['c_kuaidi_name'] ? $rows['c_kuaidi_name']= $orderArr['c_kuaidi_name'] :$rows['c_kuaidi_name']='未发货';
            $orderArr['c_kuaidi_no'] ? $rows['c_kuaidi_no'] = $orderArr['c_kuaidi_no'] : $rows['c_kuaidi_no']='未发货' ;
            if (empty($payorderArr['c_code'])) {
                $rows['c_total_money']  =$guige['c_price'];
            }else{
                $rows['c_total_money']  =$guige['c_vipprice'];
            }
            // $rows['c_pay_money']  =$orderArr['c_pay_money'];
            $rows['pay_status']  = '已完成';


            $rows['goodsdetail']['c_goods_id']  = $goodsArr['c_id'];
            $rows['goodsdetail']['c_title']  = $goodsArr['c_title'];
            $rows['goodsdetail']['c_guige']  = $guigeArr['c_guige'];
            $rows['goodsdetail']['c_price']  = $guigeArr['c_price'];
            $rows['goodsdetail']['c_vipprice']  = $guigeArr['c_vipprice'];
            $rows['goodsdetail']['c_image']  = $goodsimageArr['c_image'];
            $rows['goodsdetail']['c_num']  = $orderLisetArr['c_num'];

            $rows['goodsdetail']['c_orderlist_id']  = $orderLisetArr['c_id'];
            $this->ajaxReturn([
                'status'=>1,
                'data'=>$rows
            ]);

        }

    }

    //删除订单
    public function delorder(){
        header('Access-Control-Allow-Origin:http://abc.dasuanshop.com');
        if (IS_POST) {
            $orderlist_id = I('post.orderlist_id');  //接收订单附表id
            $payorder_id = I('post.payorder_id');
            if (empty($orderlist_id)) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'参数错误'
                ]);
            }

            if (is_array($orderlist_id)) {
                $payArr = M('Payorder')->where(['c_id'=>$payorder_id])->setField('c_isdel',0);
                if ($payArr == false) {
                    $this->ajaxReturn([
                        'status'=>0,
                        'msg'=>'删除失败'
                    ]);
                }else{
                    $this->ajaxReturn([
                        'status'=>1,
                        'msg'=>'删除成功'
                    ]);
                }
            }else{
                if (M('OrderList')->where(['c_id'=>$orderlist_id])->setField('c_isdel',0)) {
                    $this->ajaxReturn([
                        'status'=>1,
                        'msg'=>'删除成功'
                    ]);
                }else{
                    $this->ajaxReturn([
                        'status'=>0,
                        'msg'=>'删除失败'
                    ]);
                }
            }
            return;
        }
    }

    //取消订单
    public function cancel(){
        if (IS_GET) {
            $data = I('get.');
            if (empty($data['user_id'])||empty($data['payorder_id'])) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'参数错误'
                ]);
            }
            //改变订单状态
            $res = M('Payorder')->where(['c_id'=>$data['payorder_id'],'c_user_id'=>$data['user_id']])->setField('c_pay_status',8);
            if ($res == false) {
                // M()->rollback();
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'取消订单失败'
                ]);
            }else{
                $this->ajaxReturn([
                    'status'=>1,
                    'msg'=>'取消订单成功'
                ]);
            }
            return;
        }
    }

    //确认收货
    public function confirm()
    {
        if (IS_GET) {
            $data = I('get.');
            if (empty($data['user_id'])||empty($data['order_id'])) {
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'参数错误'
                ]);
            }
            //1.改变支付订单状态为确认收货
            M()->startTrans();
            $pa['c_pay_status'] = 4;
            $pa['c_shouhuo_time'] = time();
            $orderArr = M('Order')->where(['c_id'=>$data['order_id']])->find();
            $res = M('Payorder')->where(['c_id'=>$orderArr['c_payorder_id']])->save($pa);
            if ($res == false) {
                M()->rollback;
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'确认收货失败1'
                ]);
            }
            //4.改变商户订单表状态
            $r =  M('Order')->where(['c_id'=>$data['order_id']])->setField('c_pay_status',4);
            $orderArr = M('Order')->where(['c_id'=>$data['order_id']])->find();

            //2.添加积分
            $payorderArr = M('Payorder')->where(['c_id'=>$orderArr['c_payorder_id'],'c_user_id'=>$data['user_id']])->field('c_pay_money,c_integral')->find();
            $inte_total = $payorderArr['c_pay_money'] * $payorderArr['c_integral'];
            $result = M('User')->where(['c_id'=>$data['user_id']])->setInc('c_integral',$inte_total);
            if ($result == false) {
                M()->rollback;
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'确认收货失败2'
                ]);
            }
            //3.记录积分形式
            $p['c_user_id'] = $data['user_id'];
            $p['c_type']  = '购买商品';
            $p['c_inte_detail']  = '+'.$inte_total;
            $p['c_create_time'] = time();
            $r = M('Integral')->add($p);
            if ($r == false) {
                M()->rollback;
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'确认收货失败3'
                ]);
            }
            if ($res && $result && $r) {
                M()->commit();
                $this->ajaxReturn([
                    'status'=>1,
                    'msg'=>'确认收货成功'
                ]);
            }else{
                M()->rollback();
                $this->ajaxReturn([
                    'status'=>0,
                    'msg'=>'确认收货失败4',
                ]);
            }
        }
        return;
    }



    //默认收货地址
    public function address()
    {
        $model = M('Address');
        if (IS_GET) {
            $userid = I('get.user_id');
            $address_id = I('get.address_id');
            if (empty($userid)) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '用户不存在'
                ]);
            }
            $where['c_user_id'] = $userid;
            $where['c_isdel'] = 1;
            if (!empty($address_id)) {
                $where['c_id'] = $address_id;
            }
            $row = $model->where($where)->field('c_id as c_address_id,c_name,c_tel,c_provinces,c_city,c_zone,c_street,c_isdefault')
                ->order('c_isdefault desc,c_address_id asc')->find();
            if ($row == false) {
                $this->ajaxReturn([
                    'status' => 2,
                    'msg' => '数据为空'
                ]);
            } else {
                $this->ajaxReturn([
                    'status' => 1,
                    'data' => $row,
                ]);
            }
            return;
        }
    }


    public function isvip()
    {
        if (IS_GET) {
            $userid = I('get.user_id');
            if (empty($userid)) {
                $this->ajaxReturn([
                    'status' => 0,
                    'msg' => '用户不存在'
                ]);
            }
            $user = M('User')->where(['c_id'=>$userid])->field('c_code')->find();
            if ($user['c_code']) {
                $this->ajaxReturn([
                    'status' => 1,
                    'data' => $user['c_code']
                ]);
            }else{
                $this->ajaxReturn([
                    'status' => 0,
                    'data' => ''
                ]);
            }
            return;
        }
    }
}